-- What is the total amount each customer spent at the restaurant?

select
	s.customer_id, 
	sum(m.price) as total_spent
from dannys_diner.sales as s
join dannys_diner.menu as m
on s.product_id = m.product_id
group by s.customer_id
order by total_spent desc


-- How many days has each customer visited the restaurant?

select
	customer_id, 
	count(distinct order_date) as days_visit
from dannys_diner.sales
group by customer_id
order by days_visit desc


-- What was the first item from the menu purchased by each customer?

with cte as(
select
	s.customer_id, 
	m.product_name,
	min(s.order_date) as first_order_date, 
	rank() over(partition by s.customer_id order by min(s.order_date)) as ranking
from dannys_diner.sales as s
join dannys_diner.menu as m
on s.product_id = m.product_id
group by s.customer_id, m.product_name
order by s.customer_id, first_order_date
)
select
	customer_id, 
	product_name
from cte
where ranking = 1


-- What is the most purchased item on the menu and how many times was it purchased by all customers?

select
	m.product_name,
	count(s.order_date) as n_orders
from dannys_diner.sales as s
join dannys_diner.menu as m
on s.product_id = m.product_id
group by m.product_name
order by n_orders desc
limit 1

-- Which item was the most popular for each customer?

with cte as(
select
	s.customer_id,
	m.product_name,
	count(s.order_date) as n_orders, 
	rank() over(partition by s.customer_id order by count(s.order_date) desc) as ranking
from dannys_diner.sales as s
join dannys_diner.menu as m
on s.product_id = m.product_id
group by s.customer_id, m.product_name
order by n_orders desc
)
select
	customer_id, 
	product_name
from cte
where ranking = 1
order by customer_id

-- Which item was purchased first by the customer after they became a member?

with cte as (
select
	s.customer_id,
	m.product_name,
	min(s.order_date) as first_order_date,
	rank() over(partition by s.customer_id order by min(s.order_date)) as ranking
from dannys_diner.sales as s
join dannys_diner.members as mb
on s.customer_id = mb.customer_id and s.order_date > mb.join_date
join dannys_diner.menu as m
on s.product_id = m.product_id
group by s.customer_id, m.product_name
order by ranking
)
select
	customer_id, 
	product_name
from cte
where ranking=1

-- Which item was purchased just before the customer became a member?

with cte as(
select
	s.customer_id,
	m.product_name,
	min(s.order_date) as first_order_date,
	rank() over(partition by s.customer_id order by min(s.order_date)) as ranking
from dannys_diner.sales as s
join dannys_diner.members as mb
on s.customer_id = mb.customer_id and s.order_date < mb.join_date
join dannys_diner.menu as m
on s.product_id = m.product_id
group by s.customer_id, m.product_name
order by ranking
)
select
	customer_id, 
	product_name
from cte
where ranking=1

-- What is the total items and amount spent for each member before they became a member?

select
	s.customer_id, 
	count(s.order_date) as total_items,
	sum(m.price) as total_spent
from dannys_diner.sales as s
join dannys_diner.members as mb
on s.customer_id = mb.customer_id and s.order_date < mb.join_date
join dannys_diner.menu as m
on s.product_id = m.product_id
group by s.customer_id
order by total_spent desc

-- If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

select
	s.customer_id, 
	sum(case when m.product_name ='sushi' then 20
	else 10 end) as total_points
from dannys_diner.sales as s
join dannys_diner.menu as m
on s.product_id = m.product_id
group by s.customer_id
order by total_points desc

-- In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

with cte as (
select
	s.*,
	mb.join_date,
	mb.join_date + interval '1 week' as one_week_after,
	count(s.order_date) as n_orders
from dannys_diner.sales as s
join dannys_diner.members as mb
on s.customer_id = mb.customer_id and s.order_date >= mb.join_date
join dannys_diner.menu as m
on s.product_id = m.product_id
where order_date < '2021-02-01'
group by s.customer_id, s.order_date, s.product_id, mb.join_date
order by s.customer_id asc
)
select
	customer_id, 
	sum(case
		when order_date > one_week_after then 10
		when order_date between join_date and one_week_after then 20
	end) as total_points
from cte
group by customer_id
order by total_points desc

--bonus questions
--check if customer is a member

select
	s.customer_id, 	
	s.order_date, 
	m.product_name,
	m.price,
	case when s.order_date >= mb.join_date then 'Y' else 'N' end as member
from dannys_diner.sales as s
left join dannys_diner.members as mb
on s.customer_id = mb.customer_id
join dannys_diner.menu as m
on s.product_id = m.product_id
order by s.customer_id, s.order_date

--check if customer is a member then rank orders

with cte as(
select
	s.customer_id, 	
	s.order_date, 
	m.product_name,
	m.price,
	case when s.order_date >= mb.join_date then 'Y' else 'N' end as member
from dannys_diner.sales as s
left join dannys_diner.members as mb
on s.customer_id = mb.customer_id
join dannys_diner.menu as m
on s.product_id = m.product_id
order by s.customer_id, s.order_date
)
select
	*, 
	case when member = 'Y' then rank() over(partition by customer_id, member order by order_date asc)
	else null end as ranking
from cte
order by customer_id, order_date
